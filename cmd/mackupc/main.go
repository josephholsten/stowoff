package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/josephholsten/stowoff/app"
)

var (
	appNames    = flag.String("app", "", "comma-separated list of type names; must be set")
	output      = flag.String("output", "", "output file name; default srcdir/<type>_app.go")
	packageName = flag.String("package", "app", "output file package name; default app")
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("mackupc: ")
	// flag.Usage = Usage
	flag.Parse()
	if len(*appNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	apps := strings.Split(*appNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var (
		dir string
		g   Generator
	)

	dir = filepath.Dir(args[0])
	g.parseAppFiles(args)

	// Print the header and package clause.
	g.Printf("// Code generated by \"mackupc %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", packageName)
	g.Printf("\n")
	g.Printf("const BuiltinApps []Application{")

	// Run generate for each type.
	for _, app := range apps {
		g.generate(app)
	}

	g.Printf("}")

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		baseName := fmt.Sprintf("%s_app.go", apps[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer     // Accumulated output.
	app *app.Application // Package we are scanning.
}

func (g *Generator) parseAppFiles(apps []string) {
}

func (g *Generator) generate(app string) {
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}
